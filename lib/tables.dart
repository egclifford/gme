import 'dart:math';

class FateFocus {
  final int threshold;
  final String display;
  final bool isNpc;
  final bool isPc;
  final bool isThread;
  const FateFocus({this.threshold, this.display, this.isNpc, this.isPc, this.isThread});
}

class Tableaux {
  static const List<String> chaosLikelihoods = [
    "Impossible",
    "No way",
    "Very Unlikely",
    "Unlikely",
    "50/50",
    "Somewhat Likely",
    "Likely",
    "Very Likely",
    "Near Sure Thing",
    "Sure Thing",
    "Must Be"
  ];

  static const List<List<int>> fateRolls = [
    [-20, 0, 5, 5, 10, 20, 25, 45, 50, 55, 90],
    [0, 5, 5, 10, 15, 25, 35, 50, 55, 65, 85],
    [0, 5, 10, 15, 25, 45, 50, 65, 75, 80, 90],
    [5, 10, 15, 20, 35, 50, 60, 75, 80, 85, 95],
    [5, 15, 25, 35, 50, 65, 75, 85, 90, 90, 95],
    [10, 25, 45, 50, 65, 80, 85, 90, 95, 95, 100],
    [15, 35, 50, 55, 75, 85, 90, 95, 95, 95, 100],
    [25, 50, 65, 75, 85, 90, 95, 95, 100, 110, 130],
    [50, 75, 85, 90, 95, 95, 100, 105, 115, 125, 145]
  ];

  static const List<String> fateRollString = [
    "Exceptional Yes",
    "Yes",
    "No",
    "Exceptional No"
  ];

  static String getFateRollString(int chaos, int likelihood, int roll) {
    int fate = fateRolls[chaos - 1][likelihood];
    if (roll <= (fate / 5)) return fateRollString[0]; // Exceptional yes.
    if (roll <= fate) return fateRollString[1]; // Yes.
    if (roll > (80 + fate / 5)) return fateRollString[3]; // Exceptional no.
    return fateRollString[2];
  }

  static const List<FateFocus> fateFocuses = [
    FateFocus(threshold: 7,
        display: "Remote Event",
        isNpc: false,
        isPc: false,
        isThread: false),
    FateFocus(threshold: 28,
        display: "Action for NPC #",
        isNpc: true,
        isPc: false,
        isThread: false),
    FateFocus(threshold: 35,
        display: "New NPC",
        isNpc: false,
        isPc: false,
        isThread: false),
    FateFocus(threshold: 45,
        display: "Move toward Thread #",
        isNpc: false,
        isPc: false,
        isThread: true),
    FateFocus(threshold: 52,
        display: "Move away from Thread #",
        isNpc: false,
        isPc: false,
        isThread: true),
    FateFocus(threshold: 55,
        display: "Close Thread #",
        isNpc: false,
        isPc: false,
        isThread: true),
    FateFocus(threshold: 67,
        display: "Negative for PC #",
        isNpc: false,
        isPc: true,
        isThread: false),
    FateFocus(threshold: 75,
        display: "Positive for PC #",
        isNpc: false,
        isPc: true,
        isThread: false),
    FateFocus(threshold: 83,
        display: "Ambiguous Event",
        isNpc: false,
        isPc: false,
        isThread: false),
    FateFocus(threshold: 92,
        display: "Negative for NPC #",
        isNpc: true,
        isPc: false,
        isThread: false),
    FateFocus(threshold: 100,
        display: "Positive for NPC #",
        isNpc: true,
        isPc: false,
        isThread: false),
  ];

  static const Map<int, int> uneChaosConversion = {
    1: 0, 2: 1, 3: 1, 4: 2, 5: 2, 6: 2, 7: 3, 8: 3, 9: 4};

  static const List<List<int>> unePowerLevel = [
    [2, 10, 88, 98, 100],
    [4, 15, 85, 96, 100],
    [5, 20, 80, 95, 100],
    [8, 25, 85, 92, 100],
    [12, 30, 70, 88, 100]
  ];

  static const List<String> unePowerLevelString = [
    "much weaker",
    "slightly weaker",
    "comparable",
    "slightly stronger",
    "much stronger"];

  static String getUnePowerLevelString(int chaos) {
    var rng = new Random();
    int num = rng.nextInt(100);
    List<int> thresholds = unePowerLevel[uneChaosConversion[chaos]];
    for (int i = 0; i < thresholds.length; i++) {
      if (num < thresholds[i])
        return unePowerLevelString[i];
    }
    return "++";
  }

  static const Map<String, String> fieldDisplays = {
    "threads": "Threads",
    "npcs": "NPCs",
    "pcs": "PCs",
  };

  static const List<String> fateActions = [
    "attainment",
    "starting",
    "neglect",
    "fight",
    "recruit",
    "triumph",
    "violate",
    "oppose",
    "malice",
    "communicate",
    "persecute",
    "increase",
    "decrease",
    "abandon",
    "gratify",
    "inquire",
    "antagonize",
    "move",
    "waste",
    "truce",
    "release",
    "befriend",
    "judge",
    "desert",
    "dominate",
    "procrastinate",
    "praise",
    "separate",
    "take",
    "break",
    "heal",
    "delay",
    "stop",
    "lie",
    "return",
    "immitate",
    "struggle",
    "inform",
    "bestow",
    "postpone",
    "expose",
    "haggle",
    "imprison",
    "release",
    "celebrate",
    "develop",
    "travel",
    "block",
    "harm",
    "debase",
    "overindulge",
    "adjourn",
    "adversity",
    "kill",
    "disrupt",
    "usurp",
    "create",
    "betray",
    "agree",
    "abuse",
    "oppress",
    "inspect",
    "ambush",
    "spy",
    "attach",
    "carry",
    "open",
    "carelessness",
    "ruin",
    "extravagance",
    "trick",
    "arrive",
    "propose",
    "divide",
    "refuse",
    "mistrust",
    "deceive",
    "cruelty",
    "intolerance",
    "trust",
    "excitement",
    "activity",
    "assist",
    "care",
    "neglect",
    "passion",
    "work hard",
    "control",
    "attract",
    "failure",
    "pursue",
    "avenge",
    "proceedings",
    "dispute",
    "punish",
    "guide",
    "transform",
    "overthrow",
    "damage",
    "change",
  ];

  static const List<String> fateSubjects = [
    "goals",
    "dreams",
    "environment",
    "outside",
    "inside",
    "reality",
    "allies",
    "enemies",
    "evil",
    "good",
    "emotions",
    "opposition",
    "war",
    "peace",
    "the innocent",
    "love",
    "the spiritual",
    "the intellectual",
    "new ideas",
    "joy",
    "messages",
    "energy",
    "balance",
    "tension",
    "friendship",
    "the physical",
    "a project",
    "pleasures",
    "pain",
    "possessions",
    "benefits",
    "plans,lies",
    "expectations",
    "legal matters",
    "bureaucracy",
    "business",
    "a path",
    "news",
    "exterior factors",
    "advice",
    "a plot",
    "competition",
    "prison",
    "illness",
    "food",
    "attention",
    "success",
    "failure",
    "travel",
    "jealousy",
    "dispute",
    "home",
    "investment",
    "suffering",
    "wishes",
    "tactics",
    "stalemate",
    "randomness",
    "misfortune",
    "death",
    "disruption",
    "power",
    "a burden",
    "intrigues",
    "fears",
    "ambush",
    "rumor",
    "wounds",
    "extravagance",
    "a representative",
    "adversities",
    "opulence",
    "liberty",
    "military",
    "the mundane",
    "trials",
    "masses",
    "vehicle",
    "art",
    "victory",
    "plants",
    "riches",
    "status quo",
    "technology",
    "hope",
    "magic",
    "illusions",
    "portals",
    "danger",
    "weapons",
    "animals",
    "weather",
    "elements",
    "nature",
    "the public",
    "leadership",
    "fame",
    "anger",
    "information",
  ];

  static String getFateAction() {
    var rng = new Random();
    int num = rng.nextInt(fateActions.length);
    return fateActions[num];
  }

  static String getFateSubject() {
    var rng = new Random();
    int num = rng.nextInt(fateSubjects.length);
    return fateSubjects[num];
  }

  static const List<String> uneModifiers = [
    "superfluous",
    "addicted",
    "conformist",
    "nefarious",
    "sensible",
    "untrained",
    "romantic",
    "unreasonable",
    "skilled",
    "neglectful",
    "lively",
    "forthright",
    "idealistic",
    "unsupportive",
    "rational",
    "coarse",
    "foolish",
    "cunning",
    "delightful",
    "miserly",
    "inept",
    "banal",
    "logical",
    "subtle",
    "reputable",
    "wicked",
    "lazy",
    "pessimistic",
    "solemn",
    "habitual",
    "meek",
    "helpful",
    "unconcerned",
    "generous",
    "docile",
    "cheery",
    "pragmatic",
    "serene",
    "thoughtful",
    "hopeless",
    "pleasant",
    "insensitive",
    "titled",
    "inexperienced",
    "prying",
    "oblivious",
    "refined",
    "indispensible",
    "scholarly",
    "conservative",
    "uncouth",
    "willful",
    "indifferent",
    "fickle",
    "elderly",
    "sinful",
    "naive",
    "privileged",
    "glum",
    "likeable",
    "lethargic",
    "defiant",
    "obnoxious",
    "insightful",
    "tactless",
    "fanatic",
    "plebian",
    "childish",
    "pious",
    "uneducated",
    "inconsiderate",
    "cultured",
    "revolting",
    "curious",
    "touchy",
    "needy",
    "dignified",
    "pushy",
    "kind",
    "corrupt",
    "jovial",
    "shrewd",
    "liberal",
    "compliant",
    "destitute",
    "conniving",
    "careful",
    "alluring",
    "defective",
    "optimistic",
    "affluent",
    "despondent",
    "mindless",
    "passionate",
    "devoted",
    "established",
    "unseemly",
    "dependable",
    "righteous",
    "confident",
  ];

  static const List<String> uneNouns = [
    "gypsy",
    "witch",
    "merchant",
    "expert",
    "commoner",
    "judge",
    "ranger",
    "occultist",
    "reverend",
    "thug",
    "drifter",
    "journeyman",
    "statesman",
    "astrologer",
    "duelist",
    "jack-of-all-trades",
    "aristocrat",
    "preacher",
    "artisan",
    "rogue",
    "missionary",
    "outcast",
    "mercenary",
    "caretaker",
    "hermit",
    "orator",
    "chieftain",
    "pioneer",
    "burglar",
    "vicar",
    "officer",
    "explorer",
    "warden",
    "outlaw",
    "adept",
    "bum",
    "sorcerer",
    "laborer",
    "master",
    "ascendant",
    "villager",
    "magus",
    "conscript",
    "worker",
    "actor",
    "herald",
    "highwayman",
    "fortune-hunter",
    "governor",
    "scrapper",
    "monk",
    "homemaker",
    "recluse",
    "steward",
    "polymath",
    "magician",
    "traveler",
    "vagrant",
    "apprentice",
    "politician",
    "mediator",
    "crook",
    "civilian",
    "activist",
    "hero",
    "champion",
    "cleric",
    "slave",
    "gunman",
    "clairvoyant",
    "patriarch",
    "shopkeeper",
    "crone",
    "adventurer",
    "soldier",
    "entertainer",
    "craftsman",
    "scientist",
    "ascetic",
    "superior",
    "performer",
    "magister",
    "serf",
    "brute",
    "inquisitor",
    "lord",
    "villain",
    "professor",
    "servant",
    "charmer",
    "globetrotter",
    "sniper",
    "courtier",
    "priest",
    "tradesman",
    "hitman",
    "wizard",
    "beggar",
    "tradesman",
    "warrior",
  ];

  static const List<String> uneMotivationVerbs = [
    "advise",
    "obtain",
    "attempt",
    "spoil",
    "oppress",
    "interact",
    "create",
    "abduct",
    "promote",
    "conceive",
    "blight",
    "progress",
    "distress",
    "possess",
    "record",
    "embrace",
    "contact",
    "pursue",
    "associate",
    "prepare",
    "shepherd",
    "abuse",
    "indulge",
    "chronicle",
    "fulfill",
    "drive",
    "review",
    "aid",
    "follow",
    "advance",
    "guard",
    "conquer",
    "hinder",
    "plunder",
    "construct",
    "encourage",
    "agonize",
    "comprehend",
    "administer",
    "relate",
    "take",
    "discover",
    "deter",
    "acquire",
    "damage",
    "publicize",
    "burden",
    "advocate",
    "implement",
    "understand",
    "collaborate",
    "strive",
    "complete",
    "compel",
    "join",
    "assist",
    "defile",
    "produce",
    "institute",
    "account",
    "work",
    "accompany",
    "offend",
    "guide",
    "learn",
    "persecute",
    "communicate",
    "process",
    "report",
    "develop",
    "steal",
    "suggest",
    "weaken",
    "achieve",
    "secure",
    "inform",
    "patronize",
    "depress",
    "determine",
    "seek",
    "manage",
    "suppress",
    "proclaim",
    "operate",
    "access",
    "refine",
    "compose",
    "undermine",
    "explain",
    "discourage",
    "attend",
    "detect",
    "execute",
    "maintain",
    "realize",
    "convey",
    "rob",
    "establish",
    "overthrow",
    "support",
  ];
  static const List<String> uneMotivationNouns = [
    "wealth",
    "hardship",
    "affluence",
    "resources",
    "prosperity",
    "poverty",
    "opulence",
    "deprivation",
    "success",
    "distress",
    "contraband",
    "music",
    "literature",
    "technology",
    "alcohol",
    "medicines",
    "beauty",
    "strength",
    "intelligence",
    "force",
    "the wealthy",
    "the populous",
    "enemies",
    "the public",
    "religion",
    "the poor",
    "family",
    "the elite",
    "academia",
    "the forsaken",
    "the law",
    "the government",
    "the downtrodden",
    "friends",
    "criminals",
    "allies",
    "secret societies",
    "the world",
    "military",
    "the church",
    "dreams",
    "discretion",
    "love",
    "freedom",
    "pain",
    "faith",
    "slavery",
    "enlightenment",
    "racism",
    "sensuality",
    "dissonance",
    "peace",
    "discrimination",
    "disbelief",
    "pleasure",
    "hate",
    "happiness",
    "servitude",
    "harmony",
    "justice",
    "gluttony",
    "lust",
    "envy",
    "greed",
    "laziness",
    "wrath",
    "pride",
    "purity",
    "moderation",
    "vigilance",
    "zeal",
    "composure",
    "charity",
    "modesty",
    "atrocities",
    "cowardice",
    "narcissism",
    "compassion",
    "valor",
    "patience",
    "advice",
    "propaganda",
    "science",
    "knowledge",
    "communications",
    "lies",
    "myths",
    "riddles",
    "stories",
    "legends",
    "industry",
    "new religions",
    "progress",
    "animals",
    "ghosts",
    "magic",
    "nature",
    "old religions",
    "expertise",
    "spirits"
  ];

  static const List<String> furnishings = [
    "chair",
    "chaise",
    "rocking chair",
    "fauteuil",
    "bench",
    "couch",
    "cot",
    "canopy bed",
    "bed",
    "hammock",
    "crib",
    "gaming table",
    "music table",
    "bar",
    "writing desk",
    "drawing board",
    "davenport desk",
    "workbench",
    "bookcase",
    "cupboard",
    "pantry",
    "tall cabinet",
    "dresser",
    "chest",
    "coat rack",
    "hat stand",
    "filing cabinet",
    "shelves",
    "umbrella stand",
    "wine rack",
    "aquarium",
    "terrarium",
    "lamps",
    "grandfather clock",
    "rug",
    "wall art",
    "vase",
    "mirror",
    "candles",
    "crystals",
    "plants",
    "sculpture",
    "hide rug",
    "globe",
    "wall clock",
    "dining table"
  ];

  static String getFurnishings() {
    var rng = new Random();
    int num1 = rng.nextInt(furnishings.length);
    int num2 = rng.nextInt(furnishings.length);
    int num3 = rng.nextInt(furnishings.length);
    return furnishings[num1] + "\n" + furnishings[num2] + "\n" +
        furnishings[num3];
  }

  static const List<String> disciplines = [
    "Performance",
    "Visual Art",
    "History",
    "Languages",
    "Literature",
    "Law",
    "Philosophy",
    "Theology",
    "Anthropology",
    "Economics",
    "Geography",
    "Political Science",
    "Psychology",
    "Sociology",
    "Biology",
    "Chemistry",
    "Geology",
    "Astronomy",
    "Physics",
    "Mathematics",
    "Information",
    "Business",
    "Engineering",
    "Medicine",
  ];

  static String getDiscipline() {
    var rng = new Random();
    int num = rng.nextInt(disciplines.length);
    return disciplines[num];
  }

  static const List<String> backlashes = [
    "Your ritual has the opposite affect.",
    "You are sapped of strength.",
    "Your friend, ally, or companion is adversely affected.",
    "You destroy an important object.",
    "You inadvertently summon a horror.",
    "You collapse, and drift into a troubled sleep.",
    "You undergo a physical torment which leaves its mark upon you.",
    "You hear ghostly voices whispering of dark portents.",
    "You are lost in shadow, and find yourself in another place without memory of how you got there.",
    "You alert someone or something to your presence.",
    "You are not yourself, and act against a friend, ally, or companion.",
    "You affect or damage your surroundings, causing a disturbance or potential harm.",
    "You waste resources.",
    "You suffer the loss of a sense for several hours.",
    "You lose your connection to magic for a day or so, and cannot perform rituals.",
    "Your ritual affects the target in an unexpected and problematic way.",
    "Your ritual reveals a surprising and troubling truth.",
    "You are tempted by dark powers.",
    "You see a troubling vision of your future.",
    "You can't perform this ritual again until you acquire an important component.",
    "You develop a strange fear or compulsion.",
    "Your ritual causes creatures to exhibit strange or aggressive behavior.",
    "You are tormented by an apparition from your past.",
    "You are wracked with sudden sickness.",
  ];

  static String getBacklash() {
    var rng = new Random();
    int num = rng.nextInt(backlashes.length);
    return backlashes[num];
  }

  static const List<String> plotTwists = [
    "It was all a diversion.",
    "A dark secret is revealed.",
    "A trap is sprung.",
    "An assumption is revealed to be false.",
    "A secret alliance is revealed.",
    "Your actions benefit an enemy.",
    "Someone returns unexpectedly.",
    "A more dangerous foe is revealed.",
    "You and an enemy share a common goal.",
    "A true identity is revealed.",
    "You are betrayed by someone who was trusted.",
    "You are too late.",
    "The true enemy is revealed.",
    "The enemy gains new allies.",
    "A new danger appears.",
    "Someone or something goes missing.",
    "The truth of a relationship is revealed.",
    "Two seemingly unrelated situations are shown to be connected.",
    "Unexpected powers or abilities are revealed.",
  ];

  static String getPlotTwist() {
    var rng = new Random();
    int num = rng.nextInt(plotTwists.length);
    return plotTwists[num];
  }

  static const List<String> paperOrBooks = [
    "account records",
    "tax records",
    "alchemist's notebook",
    "metaphysician's notebook",
    "farmer's almanac",
    "astronomer's almanac",
    "common bestiary",
    "uncommon bestiary",
    "legend biography",
    "recent biography",
    "autobiography",
    "heraldry book",
    "flag book",
    "holy symbols book",
    "book of myths",
    "book of pressed flowers",
    "calendar",
    "furniture catalog",
    "food catalog",
    "spices catalog",
    "clothing catalog",
    "informal contract",
    "formal contract",
    "old diary",
    "current diary",
    "travelogue",
    "dictionary",
    "foreign dictionary",
    "doodles",
    "sketches",
    "tracings",
    "forged document",
    "grammar workbook",
    "heretical text",
    "censored heretical text",
    "ancient history text",
    "old history text",
    "recent history text",
    "women's history text",
    "military history text",
    "last will",
    "last will with copious edits",
    "civil legal code",
    "criminal legal code",
    "letter to parent",
    "letter to child",
    "letter to friend",
    "letter to business associate",
    "letter to aristocrat",
    "letter to peasant",
    "letter to editor",
    "letter to spouse",
    "lunatic's ravings",
    "magic tricks",
    "magic scroll",
    "map of the area",
    "map of the continent",
    "map of foreign land",
    "memoir",
    "navigational chart",
    "navigational log",
    "novella",
    "novel",
    "painting",
    "love poetry",
    "epic poetry",
    "prayer book",
    "book of curses",
    "property deed",
    "vegetarian cookbook",
    "strange animals cookbook",
    "fancy cookbook",
    "record of criminal trial",
    "royal proclamation",
    "sheet music for woodwind",
    "sheet music for strings",
    "spellbook",
    "text on armor making",
    "text on astrology",
    "text on music theory",
    "text on brewing",
    "text on wine making",
    "text on exotic flora",
    "text on exotic fauna",
    "text on herbs",
    "text on poisonous plants",
    "text on local flora",
    "text on mathematics",
    "death certificate",
    "marriage certificate",
    "text on masonry",
    "text on medicine",
    "text on theology",
    "tome of forbidden lore",
    "travelogue of planes",
    "license to operate machinery",
    "promissory note",
    "deed of horse ownership",
    "book of signatures",
    "clothier's manual",
  ];

  static String getPaperOrBook() {
    var rng = new Random();
    int num = rng.nextInt(paperOrBooks.length);
    return paperOrBooks[num];
  }

  static const List<String> tavernServices = [
    "baths",
    "casino",
    "library",
    "theater",
    "dancers",
    "healing",
    "brothel",
    "exotic food",
    "cheap food",
    "fighting ring",
    "private booths",
    "drinking contest",
    "gang hangout",
    "cult hangout",
    "drugs",
    "illegal trade",
  ];

  static const List<String> partialDescriptions = [
    "amorous",
    "angry",
    "arrogant",
    "bashful",
    "bawdy",
    "bitter",
    "black",
    "blue",
    "brass",
    "brave",
    "broken",
    "careful",
    "charming",
    "clean",
    "clear",
    "clever",
    "cloudy",
    "clumsy",
    "crazy",
    "creepy",
    "crowded",
    "cruel",
    "curious",
    "cute",
    "dangerous",
    "dark",
    "dead",
    "defiant",
    "delightful",
    "dizzy",
    "eager",
    "easy",
    "elegant",
    "enchanting",
    "fair",
    "faithful",
    "fancy",
    "fantastic",
    "fierce",
    "filthy",
    "fragile",
    "friendly",
    "funny",
    "gentle",
    "gifted",
    "gleaming",
    "glorious",
    "gray",
    "green",
    "grumpy",
    "handsome",
    "happy",
    "homeless",
    "homely",
    "horrible",
    "hungry",
    "impossible",
    "itchy",
    "jealous",
    "jittery",
    "jolly",
    "kind",
    "last",
    "lazy",
    "leaky",
    "leaning",
    "leaping",
    "leering",
    "lonely",
    "lucky",
    "lusty",
    "mad",
    "modest",
    "naughty",
    "nutty",
    "orange",
    "perfect",
    "pink",
    "plain",
    "prickly",
    "proud",
    "purple",
    "red",
    "rich",
    "rosy",
    "salty",
    "selfish",
    "shiny",
    "sleepy",
    "smiling",
    "sour",
    "sparkling",
    "stormy",
    "strange",
    "sweet",
    "tasty",
    "tender",
    "tough",
    "ugly",
    "unsightly",
    "uptight",
    "vast",
    "wandering",
    "weary",
    "wicked",
    "white",
    "witty",
    "worried",
    "yellow",
    "zealous",
  ];

  static const List<String> partialCreatures = [
    "golem",
    "oni",
    "cyclops",
    "ogre",
    "leprechaun",
    "goblin",
    "gnome",
    "fairy",
    "gorgon",
    "mermaid",
    "minotaur",
    "centaur",
    "faun",
    "werewolf",
    "monster",
    "griffin",
    "phoenix",
    "basilisk",
    "unicorn",
    "dragon",
    "yeti",
    "chimera",
    "hydra",
    "zombie",
    "banshee",
    "vampire",
    "aardvark",
    "alligator",
    "anaconda",
    "ant",
    "antelope",
    "ape",
    "aphid",
    "badger",
    "barracuda",
    "bat",
    "bear",
    "beaver",
    "bee",
    "beetle",
    "bird",
    "cow",
    "coyote",
    "crab",
    "crane",
    "cricket",
    "crow",
    "deer",
    "dog",
    "dolphin",
    "donkey",
    "dragonfly",
    "duck",
    "eagle",
    "eel",
    "elephant",
    "falcon",
    "ferret",
    "finch",
    "fish",
    "flea",
    "fly",
    "fox",
    "camel",
    "butterfly",
    "cat",
    "caterpillar",
    "condor",
    "cougar",
    "frog",
    "goat",
    "goose",
    "hare",
    "hawk",
    "hippo",
    "horse",
    "leopard",
    "lion",
    "lizard",
    "lobster",
    "mongoose",
    "monkey",
    "moose",
    "mosquito",
    "moth",
    "mouse",
    "mule",
    "octopus",
    "otter",
    "owl",
    "ox",
    "oyster",
    "panda",
    "parrot",
    "peacock",
    "pelican",
    "penguin",
    "pheasant",
    "pig",
    "pigeon",
    "rabbit",
    "raccoon",
    "rat",
    "raven",
    "rooster",
    "sheep",
    "shrew",
    "skunk",
    "snail",
    "snake",
    "spider",
    "tiger",
    "walrus",
    "whale",
    "wolf",
    "zebra",
  ];

  static const List<String> partialPeople = [
    "abbot",
    "criminal",
    "healer",
    "bandit",
    "guide",
    "assassin",
    "barbarian",
    "bard",
    "barrister",
    "performer",
    "beggar",
    "bishop",
    "blacksmith",
    "burglar",
    "mercenary",
    "miner",
    "chancellor",
    "cleric",
    "conjurer",
    "constable",
    "cook",
    "disciple",
    "diviner",
    "outcast",
    "duke/duchess",
    "vagrant",
    "enchanter",
    "evoker",
    "executioner",
    "farmer",
    "fiddler",
    "fighter",
    "fisherman",
    "fishmonger",
    "forester",
    "friar",
    "gypsy",
    "hangman",
    "harlot",
    "hermit",
    "highwayman",
    "hooligan",
    "horseman",
    "huntsman",
    "illusionist",
    "inn keeper",
    "inquisitor",
    "jailer",
    "jester",
    "king",
    "knight",
    "lady",
    "thief",
    "lord",
    "mage",
    "adventurer",
    "maiden",
    "mariner",
    "miller",
    "minstrel",
    "guard",
    "moneylender",
    "monk",
    "mystic",
    "necromancer",
    "noble",
    "oracle",
    "paladin",
    "peasant",
    "peddler",
    "pickpocket",
    "pilgrim",
    "piper",
    "plowman",
    "porter",
    "priest(ess)",
    "prince(ss)",
    "forager",
    "ranger",
    "rogue",
    "sailor",
    "scholar",
    "scribe",
    "servant",
    "shaman",
    "shepherd",
    "sheriff",
    "soldier",
    "sorcerer",
    "spinster",
    "squire",
    "steward",
    "summoner",
    "artisan",
    "traveller",
    "warrior",
    "scout",
    "witch",
    "wizard",
    "woodsman",
    "trader",
  ];

  static const List<String> partialObjects = [
    "diary",
    "bottle",
    "water",
    "pack",
    "paper",
    "glasses",
    "watch",
    "coin",
    "brush",
    "card",
    "key",
    "bag",
    "button",
    "pen",
    "match",
    "scissors",
    "note",
    "comb",
    "book",
    "mirror",
    "hammer",
    "nail",
    "anvil",
    "hand",
    "clock",
    "apple",
    "air",
    "arrow",
    "antlers",
    "ball",
    "beans",
    "board",
    "belt",
    "brain",
    "arm",
    "butter",
    "bow",
    "bridge",
    "cart",
    "cap",
    "carpet",
    "crest",
    "chair",
    "cabin",
    "cane",
    "drum",
    "lute",
    "son",
    "daughter",
    "finger",
    "eye",
    "fan",
    "flag",
    "farm",
    "forest",
    "knife",
    "sword",
    "ax",
    "heart",
    "horn",
    "herb",
    "jewel",
    "lemon",
    "lamp",
    "mouth",
    "nose",
    "milk",
    "cheese",
    "medicine",
    "ocean",
    "sea",
    "oil",
    "perfume",
    "pipe",
    "dart",
    "razor",
    "road",
    "house",
    "spoon",
    "coat",
    "star",
    "sky",
    "table",
    "tree",
    "voice",
    "wing",
    "wound",
  ];

  static const List<String> partialOthers = [
    "ancient",
    "bane",
    "banquet",
    "bite",
    "bless",
    "breath",
    "brew",
    "brood",
    "call",
    "caress",
    "choice",
    "cold",
    "courage",
    "crazed",
    "curse",
    "dance",
    "dark",
    "deadly",
    "death",
    "deep",
    "delve",
    "depths",
    "desire",
    "dream",
    "embrace",
    "end",
    "fate",
    "fire",
    "flourish",
    "fog",
    "folly",
    "fool",
    "gambit",
    "gamble",
    "gasp",
    "laugh",
    "leap",
    "lost",
    "love",
    "luck",
    "mad",
    "masquerade",
    "menagerie",
    "mercy",
    "miracle",
    "misplaced",
    "nightmare",
    "oath",
    "path",
    "plague",
    "prayer",
    "pride",
    "promise",
    "quest",
    "rage",
    "rampage",
    "rest",
    "revenge",
    "rhyme",
    "roost",
    "scream",
    "shadow",
    "shining",
    "slumber",
    "smile",
    "song",
    "sorrow",
    "soul",
    "spirit",
    "sting",
    "storm",
    "strike",
    "hate",
    "peace",
    "pride",
    "sympathy",
    "charity",
    "compassion",
    "deceit",
    "skill",
    "beauty",
    "pain",
    "misery",
    "justice",
    "truth",
    "faith",
    "knowledge",
    "thought",
    "culture",
    "trust",
    "dedication",
    "progress",
    "hospitality",
    "leisure",
    "trouble",
    "friendship",
    "relaxation",
    "anger",
  ];

  static String getShip() {
    var rng = new Random();
    int num = rng.nextInt(5);
    int numDesc = rng.nextInt(partialDescriptions.length);
    int numCreature = rng.nextInt(partialCreatures.length);
    int numPerson = rng.nextInt(partialPeople.length);
    int numObject = rng.nextInt(partialObjects.length);
    int numOther = rng.nextInt(partialOthers.length);
    if (num == 0) {
      return "The " + partialPeople[numPerson] + "'s " + partialOthers[numOther];
    }
    if (num == 1) {
      return "The " + partialDescriptions[numDesc] + " " + partialOthers[numOther];
    }
    if (num == 2) {
      return "The " + partialDescriptions[numDesc] + " " + partialCreatures[numCreature];
    }
    if (num == 3) {
      return "The " + partialDescriptions[numDesc] + " " + partialObjects[numObject];
    }
    return "The " + partialObjects[numObject] + " of " + partialOthers[numOther];
  }

  static String getTavernName() {
    var rng = new Random();
    int num = rng.nextInt(6);
    int numDesc = rng.nextInt(partialDescriptions.length);
    int numCreature = rng.nextInt(partialCreatures.length);
    int numPerson = rng.nextInt(partialPeople.length);
    int numObject = rng.nextInt(partialObjects.length);
    int numObject2 = rng.nextInt(partialObjects.length);
    int numOther = rng.nextInt(partialOthers.length);
    int numNum = rng.nextInt(8) + 2;
    if (num == 0) {
      return "$numNum " + partialCreatures[numCreature];
    }
    if (num == 1) {
      return "The " + partialPeople[numPerson] + "'s " + partialOthers[numOther];
    }
    if (num == 2) {
      return "The " + partialDescriptions[numDesc] + " " + partialCreatures[numCreature];
    }
    if (num == 3) {
      return "The " + partialDescriptions[numDesc] + " " + partialObjects[numObject];
    }
    if (num == 4) {
      return "The " + partialPeople[numPerson] + " and " + partialObjects[numObject];
    }
    return "The " + partialObjects[numObject] + " and " + partialObjects[numObject2];
  }

  static const List<String> townPrefixes = [
    "Autumn",
    "Axe",
    "Bear",
    "Black",
    "Bleak",
    "Blue",
    "Bright",
    "Bull",
    "Candle",
    "Cat",
    "Copper",
    "Dog",
    "Elk",
    "Fox",
    "Frost",
    "Gold",
    "Gray",
    "Great",
    "Green",
    "Grim",
    "High",
    "Jewel",
    "King",
    "Long",
    "Lost",
    "Low",
    "Mourn",
    "New",
    "Olive",
    "Queen",
    "Rabbit",
    "Raven",
    "Red",
    "Rock",
    "Salt",
    "Sea",
    "Shield",
    "Silver",
    "Spring",
    "Stone",
    "Storm",
    "Summer",
    "Sword",
    "Thorn",
    "White",
    "Wind",
    "Winter",
    "Witch",
    "Wolf",
    "Wood",
    "Yellow",
  ];

  static const List<String> townSuffixes = [
    "barrow",
    "bridge",
    "brook",
    "cairn",
    "cliff",
    "cove",
    "crag",
    "creek",
    "dale",
    "fall(s)",
    "field",
    "ford",
    "fort",
    "glen",
    "grove",
    "leaf",
    "hall",
    "haven",
    "hill",
    "home",
    "hope",
    "house",
    "keep",
    "lake",
    "land",
    "march",
    "marsh",
    "mark",
    "meet",
    "moor",
    "mount",
    "point",
    "ridge",
    "river",
    "rock",
    "stead",
    "stone",
    "tree",
    "ville",
    "watch",
    "water",
    "well",
    "wick",
    "wood",
  ];

  static String getTownName() {
    var rng = Random();
    int numPrefix = rng.nextInt(townPrefixes.length);
    int numSuffix = rng.nextInt(townSuffixes.length);
    return townPrefixes[numPrefix] + townSuffixes[numSuffix];
  }

  static const List<String> townTroubles = [
    "Outsiders rejected",
    "Provisions are scarce",
    "Dangerous discovery",
    "Sickness run amok",
    "Dreadful omens",
    "Allies become enemies",
    "Natural disaster",
    "Attack is imminent",
    "Old wounds reopened",
    "Lost caravan",
    "Important object is lost",
    "Dark secret revealed",
    "Someone is captured",
    "Urgent expedition",
    "Mysterious phenomenon",
    "A leader falls",
    "Revolt against a leader",
    "Families in conflict",
    "Vengeful outcast",
    "Incompetent leadership",
    "Rival settlement",
    "Reckless warmongering",
    "Nature strikes back",
    "Beast on the hunt",
    "Someone is missing",
    "Betrayed from within",
    "Production halts",
    "Broken truce",
    "Mysterious murders",
    "Wrathful haunt",
    "Debt comes due",
    "Conflict with firstborn",
    "Unjust leadership",
    "Trade route blocked",
    "Disastrous accident",
    "In the crossfire",
    "In league with the enemy",
    "Stranger causes discord",
    "Raiders prey on the weak",
    "Important event threatened",
    "Cursed past",
    "Dangerous tradition",
    "An innocent is accused",
    "Corrupted by dark magic",
    "Isolated by brutal weather",
  ];

  static String getTown() {
    var rng = new Random();
    int numTrouble = rng.nextInt(townTroubles.length);
    int numService = rng.nextInt(tavernServices.length);
    return getTownName() + "\n" + townTroubles[numTrouble] + "\nTavern: " + getTavernName() + "\nhas: " + tavernServices[numService];
  }

  static const List<String> maleNames = [
    "Alfred",
    "Emory",
    "Kye",
    "Reyansh",
    "Yahir",
    "Cain",
    "Mordechai",
    "Zayd",
    "Demetrius",
    "Harley",
    "Felipe",
    "Louie",
    "Branson",
    "Graysen",
    "Allan",
    "Kole",
    "Harold",
    "Alvaro",
    "Harlan",
    "Amias",
    "Brett",
    "Khalid",
    "Misael",
    "Westin",
    "Zechariah",
    "Aydin",
    "Kaiser",
    "Lian",
    "Bryant",
    "Junior",
    "Legacy",
    "Ulises",
    "Bellamy",
    "Brayan",
    "Kody",
    "Ledger",
    "Eliseo",
    "Gordon",
    "London",
    "Rocky",
    "Valentin",
    "Terry",
    "Damari",
    "Trent",
    "Bentlee",
    "Canaan",
    "Gatlin",
    "Kiaan",
    "Franco",
    "Eithan",
    "Idris",
    "Krew",
    "Yehuda",
    "Marlon",
    "Rodney",
    "Creed",
    "Salvatore",
    "Stefan",
    "Tristen",
    "Adrien",
    "Jamal",
    "Judson",
    "Camilo",
    "Kenny",
    "Nova",
    "Robin",
    "Rudy",
    "Van",
    "Bjorn",
    "Brodie",
    "Mac",
    "Jacoby",
    "Sekani",
    "Vivaan",
    "Blaine",
    "Ira",
    "Ameer",
    "Dominik",
    "Alaric",
    "Dane",
    "Jeremias",
    "Kyng",
    "Reginald",
    "Bobby",
    "Kabir",
    "Jairo",
    "Alexzander",
    "Benicio",
    "Vance",
    "Wallace",
    "Zavier",
    "Billy",
    "Callahan",
    "Dakari",
    "Gerald",
    "Turner",
    "Bear",
    "Jabari",
    "Cory",
    "Fox",
    "Harlem",
    "Jakari",
    "Jeffery",
    "Maxton",
    "Ronnie",
    "Yisroel",
    "Zakai",
    "Bridger",
    "Remi",
    "Arian",
    "Blaze",
    "Forest",
    "Genesis",
    "Jerome",
    "Reuben",
    "Wesson",
    "Anders",
    "Banks",
    "Calum",
    "Dayton",
    "Kylen",
    "Dangelo",
    "Emir",
    "Malakhi",
    "Salem",
    "Blaise",
    "Tru",
    "Boden",
    "Kolten",
    "Kylo",
    "Aries",
    "Henrik",
    "Kalel",
    "Landry",
    "Marcellus",
    "Zahir",
    "Lyle",
    "Dario",
    "Rene",
    "Terrance",
    "Xzavier",
    "Alfonso",
    "Darian",
    "Kylian",
    "Maison",
    "Foster",
    "Keenan",
    "Yahya",
    "Heath",
    "Javion",
    "Jericho",
    "Aziel",
    "Darwin",
    "Marquis",
    "Mylo",
    "Ambrose",
    "Anakin",
    "Jordy",
    "Juelz",
    "Toby",
    "Yael",
    "Azrael",
    "Brentley",
    "Tristian",
    "Bode",
    "Jovanni",
    "Santos",
    "Alistair",
    "Braydon",
    "Kamdyn",
    "Marc",
    "Mayson",
    "Niklaus",
    "Simeon",
    "Colter",
    "Davion",
    "Leroy",
    "Ayan",
    "Dilan",
    "Ephraim",
    "Anson",
    "Merrick",
    "Wes",
    "Will",
    "Jaxen",
    "Maxim",
    "Howard",
    "Jad",
    "Jesiah",
    "Ignacio",
    "Zyon",
    "Ahmir",
    "Jair",
    "Mustafa",
    "Jermaine",
    "Yadiel",
    "Aayan",
    "Dhruv",
    "Seven",
    "Stone",
    "Rome",
  ];

  static const List<String> femaleNames = [
    "Clare",
    "Teresa",
    "Annika",
    "Kamilah",
    "Azariah",
    "Della",
    "Addyson",
    "Kai",
    "Lilianna",
    "Tinsley",
    "Yaritza",
    "Navy",
    "Winnie",
    "Andi",
    "Kamiyah",
    "Waverly",
    "Sky",
    "Amaris",
    "Ramona",
    "Saoirse",
    "Hana",
    "Judith",
    "Halle",
    "Laylah",
    "Novalee",
    "Jaycee",
    "Zaniyah",
    "Alianna",
    "Paulina",
    "Jayde",
    "Thalia",
    "Giovanna",
    "Gwen",
    "Iliana",
    "Elora",
    "Ezra",
    "Kaylie",
    "Braylee",
    "Mavis",
    "Ellison",
    "Margo",
    "Mylah",
    "Paisleigh",
    "Analia",
    "August",
    "Brittany",
    "Kaisley",
    "Belen",
    "Promise",
    "Amiya",
    "Dalary",
    "Veda",
    "Alisson",
    "Keilani",
    "Oakleigh",
    "Guadalupe",
    "Leanna",
    "Rosalyn",
    "Selene",
    "Theodora",
    "Kamari",
    "Anais",
    "Elodie",
    "Celia",
    "Dani",
    "Hunter",
    "Indie",
    "Kenia",
    "Nellie",
    "Belle",
    "Kataleya",
    "Lexie",
    "Miah",
    "Rylan",
    "Sylvie",
    "Valery",
    "Addilynn",
    "Dulce",
    "Marissa",
    "Meilani",
    "Natasha",
    "Jaylee",
    "Kimora",
    "Raquel",
    "Scarlette",
    "Aliya",
    "Nataly",
    "Whitney",
    "Corinne",
    "Denver",
    "Nathalie",
    "Kiera",
    "Milana",
    "Vada",
    "Violeta",
    "Luz",
    "Addisyn",
    "Casey",
    "Deborah",
    "Tori",
    "Zainab",
    "Erika",
    "Jenesis",
    "Avalynn",
    "Nancy",
    "Emmalynn",
    "Hadlee",
    "Heavenly",
    "Aubrielle",
    "Elisabeth",
    "Salma",
    "Adalee",
    "Landry",
    "Malayah",
    "Novah",
    "Egypt",
    "Ayleen",
    "Blessing",
    "Elina",
    "Joyce",
    "Myah",
    "Zoie",
    "Christine",
    "Jaelynn",
    "Persephone",
    "Chandler",
    "Emmaline",
    "Paloma",
    "Harleigh",
    "Noor",
    "Paola",
    "India",
    "Madalynn",
    "Rosalee",
    "Florence",
    "Maliah",
    "Flora",
    "Luella",
    "Patricia",
    "Whitley",
    "Carolyn",
    "Kathleen",
    "Keily",
    "Kiana",
    "Tenley",
    "Alyson",
    "Barbara",
    "Dana",
    "Yasmin",
    "Bexley",
    "Micah",
    "Tatiana",
    "Arden",
    "Aubriella",
    "Lindsey",
    "Emani",
    "Hailee",
    "Lisa",
    "Sevyn",
    "Fallon",
    "Magdalena",
    "Tinley",
    "Halo",
    "Lailah",
    "Arlette",
    "Ansley",
    "Esperanza",
    "Cleo",
    "Aila",
    "Emerald",
    "Jaelyn",
    "Karlee",
    "Kaya",
    "Ingrid",
    "Jewel",
    "Emilee",
    "Giana",
    "Paityn",
    "Zola",
    "Amoura",
    "Renee",
    "Ann",
    "Berkley",
    "Harriet",
    "Queen",
    "Sariah",
    "Beatrix",
    "Sandra",
    "Alannah",
    "Austyn",
    "Freyja",
    "Kaylin",
    "Samira",
    "Taliyah",
    "Hadleigh",
    "Kaiya",
    "Robin",
    "Luisa",
    "Zendaya",
    "Ariadne",
    "Dixie",
  ];

  static const List<String> ironNames = [
    "Solana",
    "Tessa",
    "Masias",
    "Keelan",
    "Sibila",
    "Kanno",
    "Cadigan",
    "Morien",
    "Razeena",
    "Sola",
    "Mona",
    "Mira",
    "Kodroth",
    "Padma",
    "Perella",
    "Kione",
    "Avella",
    "Myrick",
    "Katja",
    "Naila",
    "Qamar",
    "Tio",
    "Lio",
    "Kormak",
    "Artiga",
    "Cera",
    "Zura",
    "Eos",
    "Ithela",
    "Zanita",
    "Bastien",
    "Zhan",
    "Brynn",
    "Elli",
    "Kaivan",
    "Tegan",
    "Maura",
    "Valeri",
    "Pendry",
    "Haleema",
    "Hirsham",
    "Quinn",
    "Abella",
    "Pemba",
    "Fanir",
    "Morter",
    "Edda",
    "Glain",
    "Wulan",
    "Lestara",
    "Emelyn",
    "Mai",
    "Lago",
    "Kendi",
    "Farina",
    "Elstan",
    "Althus",
    "Pearce",
    "Saskia",
    "Leela",
    "Wynne",
    "Kabeera",
    "Ishana",
    "Haf",
    "Caldas",
    "Flint",
    "Aeddon",
    "Nisus",
    "Delkash",
    "Khinara",
    "Serene",
    "Nia",
    "Milla",
    "Chenda",
    "Nan",
    "Nakata",
    "Themon",
    "Keeara",
    "Kynan",
    "Erin",
    "Katania",
    "Kiah",
    "Alban",
    "Morell",
    "Jaggar",
    "Parcell",
    "Temir",
    "Beca",
    "Jelma",
    "Bas",
    "Ikram",
    "Willa",
    "Sabine",
    "Melia",
    "Nadira",
    "Tallus",
    "Sidan",
    "Gwen",
    "Deshi",
    "Amara",
    "Segura",
    "Vigo",
    "Sarda",
    "Gethin",
    "Sadia",
    "Shona",
    "Bataar",
    "Malik",
    "Kalidas",
    "Basira",
    "Dag",
    "Wena",
    "Joa",
    "Kuno",
    "Sendra",
    "Glynn",
    "Reva",
    "Kori",
    "Toran",
    "Kai",
    "Setara",
    "Arasen",
    "Kalina",
    "Lucia",
    "Kuron",
    "Jihan",
    "Maya",
    "Griff",
    "Hennion",
    "Reema",
    "Owena",
    "Abram",
    "Yorath",
    "Adda",
    "Aida",
    "Rhoddri",
    "Euros",
    "Myrtle",
    "Shekhar",
    "Kova",
    "Nekun",
    "Servan",
    "Kara",
    "Menna",
    "Reese",
    "Morgan",
    "Tahir",
    "Kenrick",
    "Nanda",
    "Sarria",
    "Indirra",
    "Tamara",
    "Nakura",
    "Giliana",
    "Asha",
    "Akiya",
    "Jebran",
    "Delos",
    "Talan",
    "Kotama",
    "Torgan",
    "Mattick",
    "Fara",
    "Makari",
    "Okoth",
    "Katrin",
    "Selva",
    "Khulan",
    "Namba",
    "Kimura",
    "Verena",
    "Lona",
    "Rhian",
    "Beltran",
    "Taylah",
    "Tristan",
    "Del",
    "Kato",
    "Siorra",
    "Ranna",
    "Esra",
    "Sayer",
    "Alina",
    "Eleri",
    "Cortina",
    "Muna",
    "Irsia",
    "Vesna",
    "Mura",
    "Kayu",
    "Kataka",
    "Torrens",
    "Bevan",
    "Keyshia",
    "Yuda",
    "Chandra",
    "Mila",
    "Nazmi",
    "Lili",
    "Ghalen",
  ];

  static const List<String> godNames = [
    "Război",
    "Erou",
    "Nälij",
    "Rymat Samiar",
    "Ismaros",
    "Edrun",
    "Talichtoli",
    "Pocaba",
    "Hornfels",
    "Fýsi",
    "Calais",
    "Noklaji",
    "Vigo",
    "Samuqan",
    "Sangasu",
    "Naphistim",
    "Mezizi",
    "Lugalme",
    "Amarazen",
    "Elutil",
    "Delondra",
    "Toitel",
    "Caileon Le Corre",
    "Michizane",
    "Molac",
    "Tempsdule",
    "Metria",
    "Decepscher",
    "Aveli",
    "Falkorta",
    "Icholese",
    "Doran",
    "Yob",
    "Peolai",
    "Lelia",
    "Vadaszat",
    "Aussiria",
    "Vancet",
    "Judrod",
    "Paxe",
    "Azuiar",
    "Entaros",
    "Knaben",
    "Ub’took",
    "Nurggle",
    "Mamcho",
    "Masnach",
    "Nador",
    "Rhyfedel",
    "Yunni",
    "Gwallus",
    "Perthor",
    "Yera",
    "Pydros",
    "Araknev",
    "Israfiel",
    "Myshta",
    "Sedyne",
    "Audalma",
    "Augelva",
    "Auphaela",
    "Auchelda",
    "Issha",
    "Callatti",
    "Illuri",
    "Matala",
    "Nasheth",
    "Ignotus",
    "Yehven",
    "Salandros",
    "Gaelin",
    "Nais",
    "Palakis",
    "Tenticonia",
    "Lairon",
    "Regaia",
    "Viel",
    "Remira",
    "Olkath",
    "Althok",
    "Kinfal",
    "Plera",
    "Natuno",
    "Zobober",
    "Bleigusblonde",
    "Toam’aron",
    "Seva",
    "Baklunish",
    "Oeridian",
    "Flan",
    "Suel",
    "Unknown",
    "Blerred",
    "Geshtai",
    "Atroa",
    "Allitur",
    "Beltar",
    "Tharizdun",
    "Boccob",
    "Istus",
    "Celestian",
    "Berei",
    "Bralm",
    "Ulaa",
    "Ehlonna",
    "Xan Yae",
    "Delleb",
    "Beory",
    "Fortubo",
    "Wastri",
    "Incabulos",
    "Zuoken",
    "Erythnul",
    "Iuz",
    "Kord",
    "Joramy",
    "Fharlanghn",
    "Nerull",
    "Lendor",
    "Lirr",
    "Heironeous",
    "Obad-hai",
    "Llerg",
    "Myhriss",
    "Hextor",
    "Pelor",
    "Norebo",
    "Olidammara",
    "Kurell",
    "Rao",
    "Phaulkon",
    "Ralishaz",
    "Pholtus",
    "Phyton",
    "Procan",
    "Pyremius",
    "Trithereon",
    "Rudd",
    "Syrul",
    "Zagyg",
    "Sotillion",
    "Xerbo",
    "Telchur",
    "Velnius",
    "Wenta",
    "Arsula",
    "Ukames",
    "Anatu",
    "Naidita",
    "Ahmeshki",
    "Aralu",
    "Belesunna",
    "Ilsit",
    "Arakhi",
    "Vidarna",
    "Mayatanay",
    "Ibrahem",
    "Ninsunu",
    "Etana",
    "Sinosu",
    "Balathu",
    "Gamanna",
    "Jemshida",
    "Dorosi",
    "Nessana",
    "Visapni",
    "Gezera",
    "Uralar",
    "Hullata",
    "Zursan",
    "Tishetu",
    "Sidura",
    "Seleeku",
    "Leucia",
    "Kerihu",
    "Utamara",
    "Sutahe",
    "Ereshki",
    "Nebakay",
    "Dotani",
    "Cybela",
    "Dismashk",
    "Uktannu",
    "Anunna",
    "Mitunu",
    "Retenay",
    "Otani",
    "Atani",
    "Kendalanu",
    "Ditani",
    "Kinzura",
    "Tahuta",
    "Faraza",
    "Sumula",
    "Mattissa",
  ];

  static String getName(bool isMale) {
    var rng = new Random();
    String firstName;
    String lastName;
    if (isMale) {
      int num = rng.nextInt(maleNames.length);
      firstName = maleNames[num];
    } else {
      int num = rng.nextInt(femaleNames.length);
      firstName = femaleNames[num];
    }
    if (rng.nextBool()) {
      int num = rng.nextInt(ironNames.length);
      lastName = ironNames[num];
    } else {
      int num = rng.nextInt(godNames.length);
      lastName = godNames[num];
    }
    return firstName + " " + lastName;
  }

  static String getGodName() {
    var rng = new Random();
    int num = rng.nextInt(godNames.length);
    return godNames[num];
  }

  static const List<String> regionTypes = [
    "Bay",
    "Bluffs",
    "Bog",
    "Cliffs",
    "Desert",
    "Downs",
    "Dunes",
    "Expanse",
    "Fells",
    "Fen",
    "Flats",
    "Foothills",
    "Forest",
    "Groves",
    "Heath",
    "Heights",
    "Hills",
    "Hollows",
    "Jungle",
    "Lake",
    "Lowland",
    "March",
    "Marsh",
    "Meadows",
    "Moor",
    "Morass",
    "Mounds",
    "Mountains",
    "Peaks",
    "Plains",
    "Prairie",
    "Quagmire",
    "Range",
    "Reach",
    "Sands",
    "Savanna",
    "Scarps",
    "Sea",
    "Slough",
    "Sound",
    "Steppe",
    "Swamp",
    "Sweep",
    "Teeth",
    "Thicket",
    "Upland",
    "Wall",
    "Waste",
    "Waterland",
    "Woods",
  ];

  static const List<String> regionAdjectives = [
    "Ageless",
    "Ashen",
    "Black",
    "Blessed",
    "Blighted",
    "Blue",
    "Broken",
    "Burning",
    "Cold",
    "Cursed",
    "Dark",
    "Dead",
    "Deadly",
    "Deep",
    "Desolate",
    "Diamond",
    "Dim",
    "Dismal",
    "Dun",
    "Eerie",
    "Endless",
    "Fallen",
    "Far",
    "Fell",
    "Flaming",
    "Forgotten",
    "Forsaken",
    "Frozen",
    "Glittering",
    "Golden",
    "Green",
    "Grim",
    "Holy",
    "Impassible",
    "Jagged",
    "Light",
    "Long",
    "Misty",
    "Perilous",
    "Purple",
    "Red",
    "Savage",
    "Shadowy",
    "Shattered",
    "Shifting",
    "Shining",
    "Silver",
    "White",
    "Wicked",
    "Yellow",
  ];
  static const List<String> regionNouns = [
    "Ash",
    "Bone",
    "Darkness",
    "Dead",
    "Death",
    "Desolation",
    "Despair",
    "Devil",
    "Doom",
    "Dragon",
    "Fate",
    "Fear",
    "Fire",
    "Fury",
    "Ghost",
    "Giant",
    "God",
    "Gold",
    "Heaven",
    "Hell",
    "Honor",
    "Hope",
    "Horror",
    "King",
    "Life",
    "Light",
    "Lord",
    "Mist",
    "Peril",
    "Queen",
    "Rain",
    "Refuge",
    "Regret",
    "Savior",
    "Shadow",
    "Silver",
    "Skull",
    "Sky",
    "Smoke",
    "Snake",
    "Sorrow",
    "Storm",
    "Sun",
    "Thorn",
    "Thunder",
    "Traitor",
    "Troll",
    "Victory",
    "Witch",
  ];

  static String getRegion() {
    var rng = new Random();
    String regionType = regionTypes[rng.nextInt(regionTypes.length)];
    String regionAdj = regionAdjectives[rng.nextInt(regionAdjectives.length)];
    String regionNoun = regionNouns[rng.nextInt(regionNouns.length)];
    int num = rng.nextInt(12);
    if (num < 4) {
      return regionAdj + " " + regionType;
    } else if (num < 6) {
      return regionType + " of (the) " + regionNoun;
    } else if (num < 8) {
      return "The " + regionType + " " + regionAdj;
    } else if (num < 10) {
      return regionNoun + " " + regionType;
    } else if (num < 11) {
      return regionNoun + "'s " + regionAdj + " " + regionType;
    }
    return regionAdj + " " + regionType + " of (the) " + regionNoun;
  }

  static const List<String> dungeonThemes = [
    "rot/decay",
    "torture",
    "madness",
    "all is lost",
    "noble sacrifice",
    "savage fury",
    "survival",
    "criminal activity",
    "secrets",
    "tricks",
    "invasion",
    "factions at war",
    "invention",
    "elemental",
    "knowledge/learning",
    "growth/expansion",
    "transformation/change",
    "chaos",
    "shadowy forces",
    "forbidden knowledge",
    "poison/disease",
    "corruption",
    "impending disaster",
    "scheming evil",
    "divination",
    "blasphemy",
    "arcane research",
    "occult forces",
    "ancient curse",
    "mutation",
    "unquiet dead",
    "bottomless hunger",
    "incredible power",
    "unspeakable horrors",
    "holy war",
  ];

  static const List<String> dungeonFounders = [
    "alien/precursor",
    "demigod/demon",
    "cavernous",
    "natural formation",
    "religious order/cult",
    "good humans",
    "bad humans",
    "dwarven",
    "gnomish",
    "elven",
    "wizard/madman",
    "monarch/warlord",
  ];

  static const List<String> dungeonFunctions = [
    "source/portal",
    "mine",
    "tomb",
    "prison",
    "lair",
    "hideout",
    "stronghold",
    "sanctuary",
    "archive/library",
    "unknown/mystery",
  ];

  static const List<String> dungeonRuins = [
    "arcane disaster",
    "damnation/curse",
    "earthquake",
    "fire",
    "flood",
    "plague",
    "overrun by monsters",
    "infested by beasts",
    "war",
    "depleted resources",
    "better prospects elsewhere",
  ];

  static const List<String> dungeonDiscoveries = [
    "arcane residue",
    "blight",
    "arcane mutation",
    "enchantment",
    "arcane source/repository",
    "planar distortion",
    "portal",
    "planar tear",
    "planar outpost",
    "divine mark",
    "cursed place",
    "hallowed place",
    "watched place",
    "divine presence",
    "burrow",
    "cave/tunnels",
    "nest",
    "hive",
    "ruins",
    "difficult ground",
    "cliff/crevasse/chasm",
    "ravine",
    "odd obstacle",
    "limited area of another terrain",
    "hole/pit",
    "alititude change",
    "canyon/valley",
    "peak in distance",
    "(hot)spring",
    "waterfall",
    "geyser",
    "creek",
    "pond",
    "lake",
    "river",
    "sea/ocean",
    "ancient tree",
    "giant flowers",
    "dense vines",
    "crater",
    "odd landmark",
    "hunting game",
    "natural fruits/nuts",
    "herbs",
    "spices",
    "dye source",
    "timber",
    "ore",
    "precious metal",
    "faint tracks",
    "clear tracks",
    "multiple tracks",
    "signs of violence",
    "train of blood",
    "bones",
    "corpse",
    "site of violence",
    "refuse",
    "cargo",
    "broken tools/weapons/armor",
    "trinkets",
    "coins",
    "tool kit",
    "weapon cache",
    "armor cache",
    "map",
    "food/supplies",
    "treasure",
  ];

  static const List<String> dungeonHazards = [
    "taint/blight",
    "arcane/planar/divine trap",
    "arcane/planar/divine effect",
    "blinding mist",
    "bog/quicksand",
    "pitfall/sinkhole",
    "poison/disease",
    "quake/fire/tornado",
    "alarm trap",
    "ensnaring/paralyzing trap",
    "injurious trap",
    "gas/fire trap",
    "ambush",
  ];

  static String getDungeon() {
    var rng = new Random();
    int numThemes = rng.nextBool() ? 2 : 3;
    numThemes += rng.nextBool() ? 0 : 1;
    int numAreas = numThemes * (numThemes + 1);
    String founders = dungeonFounders[rng.nextInt(dungeonFounders.length)];
    String purpose = dungeonFunctions[rng.nextInt(dungeonFunctions.length)];
    String ruin = dungeonRuins[rng.nextInt(dungeonRuins.length)];
    List<String> themes = [];
    for (int i=0; i < numThemes; i++) {
      themes.add(dungeonThemes[rng.nextInt(dungeonThemes.length)]);
    }
    List<String> lines = [];
    lines.add(founders + " " + purpose + " ($numAreas)");
    lines.add(ruin);
    lines.add(themes.join(", "));
    return lines.join("\n");
  }

  static String getDungeonRoom() {
    var rng = new Random();
    List<String> topLinePieces = [];
    if (rng.nextBool()) topLinePieces.add("themed");
    if (rng.nextBool() && rng.nextBool()) {
      topLinePieces.add("unique");
    } else {
      topLinePieces.add("common");
    }
    String bottomLine = "";
    if (rng.nextBool()) {
      bottomLine = "\nDiscovery: " + dungeonDiscoveries[rng.nextInt(dungeonDiscoveries.length)];
    }
    if (rng.nextBool()) {
      int num = rng.nextInt(3);
      if (num == 0) {
        bottomLine = "\nHazard: " + dungeonHazards[rng.nextInt(dungeonHazards.length)];
      } else if (num == 1) {
        bottomLine = "\nThreat: sentient";
      } else {
        bottomLine = "\nThreat: creature";
      }
    }
    return topLinePieces.join(", ") + bottomLine;
  }

  static const List<String> ironActions = [
    "Scheme",
    "Falter",
    "Advance",
    "Clash",
    "Suppress",
    "Command",
    "Weaken",
    "Hunt",
    "Refuse",
    "Initiate",
    "Share",
    "Find",
    "Create",
    "Destroy",
    "Deliver",
    "Swear",
    "Avoid",
    "Hide",
    "Avenge",
    "Reject",
    "Fortify",
    "Guard",
    "Demand",
    "Betray",
    "Defeat",
    "Explore",
    "Secure",
    "Control",
    "Bolster",
    "Arrive",
    "Break",
    "Seize",
    "Affect",
    "Risk",
    "Mourn",
    "Change",
    "Surrender",
    "Reveal",
    "Defend",
    "Inspect",
    "Gather",
    "Debate",
    "Raid",
    "Defy",
    "Support",
    "Evade",
    "Transform",
    "Follow",
    "Assault",
    "Persevere",
    "Construct",
    "Deflect",
    "Serve",
    "Locate",
    "Threaten",
    "Begin",
    "Endure",
    "Attack",
    "Move",
    "Release",
    "Leave",
    "Coordinate",
    "Lose",
    "Preserve",
    "Resist",
    "Reduce",
    "Manipulate",
    "Await",
    "Escalate",
    "Remove",
    "Impress",
    "Distract",
    "Eliminate",
    "Take",
    "Journey",
    "Withdraw",
    "Oppose",
    "Escort",
    "Abandon",
    "Capture",
    "Learn",
    "Investigate",
    "Overwhelm",
    "Communicate",
    "Hold",
    "Challenge",
    "Depart",
    "Focus",
    "Acquire",
    "Search",
    "Uncover",
    "Protect",
    "Charge",
    "Breach",
    "Finish",
    "Summon",
    "Aid",
    "Strengthen",
    "Uphold",
    "Restore",
  ];

  static const List<String> ironThemes = [
    "Risk",
    "History",
    "Prize",
    "Ability",
    "World",
    "Destiny",
    "Price",
    "Vow",
    "Momentum",
    "Ally",
    "Protection",
    "Power",
    "Battle",
    "Nature",
    "Memory",
    "Safety",
    "Opinion",
    "Ruin",
    "Survival",
    "Burden",
    "Mysticism",
    "Weapon",
    "Vengeance",
    "Rival",
    "Wound",
    "Opportunity",
    "Problem",
    "Shelter",
    "Faction",
    "Idea",
    "Leader",
    "Danger",
    "Revenge",
    "Fear",
    "Corruption",
    "Time",
    "Freedom",
    "Health",
    "Duty",
    "Debt",
    "Fellowship",
    "Secret",
    "Hate",
    "Enemy",
    "Innocence",
    "Possession",
    "Religion",
    "Renown",
    "Stranger",
    "Spirit",
    "Direction",
    "Passage",
    "Fame",
    "Death",
    "Land",
    "Desolation",
    "Honor",
    "Creature",
    "Strength",
    "Labor",
    "Disease",
    "Knowledge",
    "Solution",
    "Advantage",
    "Truth",
    "Tool",
    "Blood",
    "Quest",
    "Balance",
    "Language",
    "Pride",
    "Love",
    "Rumor",
    "Loss",
    "Barrier",
    "Weakness",
    "Law",
    "Creation",
    "Greed",
    "Path",
    "Decay",
    "Family",
    "Warning",
    "Trade",
    "Resource",
    "Relationship",
    "Bond",
    "Structure",
    "Wealth",
    "Hope",
    "Dream",
    "Home",
    "Superstition",
    "Community",
    "Strategy",
    "Peace",
    "War",
    "Supply",
    "Deception",
    "Portent",
  ];

  static String getIronOracle() {
    var rng = new Random();
    String ironAction = ironActions[rng.nextInt(ironActions.length)];
    String ironTheme = ironThemes[rng.nextInt(ironThemes.length)];
    return ironAction + " " + ironTheme;
  }

  static const List<int> ironPayThePriceDistro = [
    2, 5, 9, 16, 23, 32, 41, 50, 59, 68, 76, 85, 90, 94, 98];

  static const List<String> ironPayThePrices = [
    "Something dreadful happens and changes the course of your quest.",
    "A person or community you trusted loses faith in you, or acts against you.",
    "A person or community you care about is exposed to danger.",
    "You are separated from something or someone.",
    "Your action has an unintended effect.",
    "Something of value is lost or destroyed.",
    "The current situation worsens.",
    "A new danger or foe is revealed.",
    "It causes a delay or puts you at a disadvantage.",
    "It is physically harmful.",
    "It is mentally/spiritually stressful.",
    "A surprising development complicates your quest.",
    "It wastes resources.",
    "It forces you to act against your best intentions.",
    "A friend, companion, or ally is put in harm’s way (or you are, if alone).",
  ];

  static String getIronPayThePrice(bool rollTwice) {
    var rng = new Random();
    int roll = rng.nextInt(rollTwice ? 98 : 100) + 1;
    String price = "";
    for (int i = 0; i < ironPayThePriceDistro.length; i++) {
      if (roll <= ironPayThePriceDistro[i]) {
        price = ironPayThePrices[i];
        break;
      }
    }
    if (price == "") {
      price = getIronPayThePrice(true) + "\nAnd...\n" + getIronPayThePrice(true);
    }
    return price;
  }

  static const List<String> ironLocationDescriptions = [
    "High",
    "Occupied",
    "Remote",
    "Rich",
    "Exposed",
    "Big",
    "Small",
    "Savage",
    "Broken",
    "Defended",
    "Diverse",
    "Withered",
    "Rough",
    "Mystical",
    "Dark",
    "Inaccessible",
    "Shadowy",
    "Protected",
    "Contested",
    "Abandoned",
    "Grim",
    "Wide",
    "Wild",
    "Foul",
    "Fertile",
    "Dead",
    "Blocked",
    "Ruined",
    "Ancient",
    "Barren",
    "Perilous",
    "Cold",
    "Hidden",
    "Blighted",
    "Low",
    "Beautiful",
    "Abundant",
    "Lush",
    "Flooded",
    "Empty",
    "Strange",
    "Corrupted",
    "Peaceful",
    "Forgotten",
    "Expansive",
    "Settled",
    "Dense",
    "Civilized",
    "Desolate",
    "Isolated",
  ];

  static const List<String> ironLocationTypes = [
    "Hideout",
    "Waterfall",
    "Cliff",
    "Ruin",
    "Cave",
    "Grove",
    "Mine",
    "Swamp",
    "Village",
    "Waste",
    "Fen",
    "Moor",
    "Mystical Site",
    "Ravine",
    "Thicket",
    "Path",
    "Road",
    "River Ford",
    "Outpost",
    "Tree",
    "Valley",
    "Wall",
    "Pond",
    "Bay/Fjord",
    "Battlefield",
    "Fields",
    "Foothills",
    "Hovel",
    "Marsh",
    "Lake",
    "Spring",
    "Steading",
    "River",
    "Lair",
    "Rapids",
    "Forest",
    "Fort",
    "Pass",
    "Coast",
    "Bridge",
    "Trail",
    "Hill",
    "Camp",
    "Glade",
    "Mountain",
    "Cairn/Grave",
    "Plain",
    "Woods",
    "Ridge",
    "Caravan",
    "Anomaly",
  ];

  static String getIronLocation() {
    var rng = new Random();
    String ironLocationDescription = ironLocationDescriptions[rng.nextInt(ironLocationDescriptions.length)];
    String ironLocationType = ironLocationTypes[rng.nextInt(ironLocationTypes.length)];
    return ironLocationDescription + " " + ironLocationType;
  }

  static const List<String> oddCorpses = [
    "They’re still alive, just barely.",
    "It’s undead and playing dead, waiting for one of the living to come by to attack.",
    "It’s carrying a contagious disease.",
    "It’s been covered in glue.",
    "It’s a lifelike mannequin.",
    "On closer inspection it looks exactly like you.",
    "It’s boobytrapped with explosives.",
    "The coins in its pocket weren’t minted with any known metal.",
    "It’s being used as a lure by a cunning predator.",
    "Their friends are looking for them and they won’t take kindly to looters.",
    "It’s someone famous.",
    "There’s no apparent cause of death.",
    "The body’s already been looted.",
    "Someone has stripped the body and replaced everything it was wearing and carrying with other stuff.",
    "The body is floppy and has no bones.",
    "It’s been covered in flammable oil.",
    "Everything they’re carrying is a convincing but less valuable counterfeit.",
    "Everything they’re carrying is of high quality and more valuable than other similar items.",
    "They’ve got a bounty on their head. If you bring their head in you can collect the bounty.",
    "They’re still alive and in good health, but are practicing for a role as a dead body in a play.",
    "Something’s removed its teeth and fingertips.",
    "A vicious parasite has been incubating in its guts and will emerge and attack if the body’s disturbed.",
    "All the body’s valuables have been stuffed down its throat.",
    "It immediately decays to a late stage of decomposition when touched.",
    "It smells terrible and the smell will cling to you for hours after you touch it.",
    "A swarm of small scavengers are eating it.",
    "There is a wind-up key in their back. If turned they’ll return to life.",
    "The first person to touch them will have a vision of how they died.",
    "It’s got no face.",
    "Something has decapitated it and stitched on someone else’s head.",
    "Some of its organs have been surgically removed.",
    "Anyone who loots the body will be haunted by its ghost.",
    "The words: “TRESPASSERS BEWARE” have been carved into the body.",
    "The body’s been implanted with galvanic wiring that make it twitch and grab when touched. The wiring is worth 10 silver if stripped out, and is a good conductor.",
    "The body smells irresistibly delicious. Save vs. magic to not take a bite if you don’t immediately back off.",
    "The body’s been enchanted to repeat a speech promising a reward to the person who finds the one who killed them.",
    "The body is a glamour, and so is everything it carries. One hour after being found, it’ll all disappear.",
    "The body has an important political message tattooed on it. Some of the message has been flayed off.",
    "The body’s cause of death is implausibly incongruent with its environment.",
    "They’re still alive, and conducting a sting operation on necrophiliacs.",
    "The body’s hand is pointed towards a secret door or compartment.",
    "The body’s on top of the pressure plate of a trap.",
    "The body is unnaturally, painfully cold to the touch.",
    "The body’s anatomy is subtly wrong.",
    "The body shrivels and shrinks every time it’s touched.",
    "The body bloats and swells every time it’s touched. 1-in-6 chance each time it bursts in a flood of putrescence.",
    "One of the items it’s carrying is cursed to induce a deathlike stupour. When removed from the body it will spring back to life and the looter will fall unconscious.",
    "One of the body’s fingers has been carved down to the bone into a key. It unlocks something nearby.",
    "The body is being used as a test by a very dumb goblin hiding nearby to learn what’s worth looting from a corpse.",
    "They are several smaller corpses posed in the same outfit to look like a larger corpse.",
    "It’s been embalmed. The embalming materials are quite valuable if extracted.",
    "Makeup has been applied to the body to make it look fresher.",
    "The body’s been enchanted to pronounce a curse on looters.",
    "It bears a familial resemblance to someone you’ve met.",
    "It changes in appearance every time you look away.",
    "If you loot it it’ll appear next to you the next time you sleep.",
    "It’s a mimic posing as a corpse.",
    "The body bears the marks of necromancy and will rise as one of the undead unless blessed, or dismembered or otherwise destroyed.",
    "The body appears to be swiftly decomposing in reverse.",
    "They’re still alive, and are hunting ghouls using themself as bait. They’ll start off assuming anyone touching them is a ghoul.",
    "The body has a magic diary that records everything that happens to and around it.",
    "The body has been seasoned with expensive spices.",
    "The body’s skin has been tanned into leather while it’s still attached.",
    "The body’s eyes follow you and never blink.",
    "The body’s weirdly heavy.",
    "Decomposers and scavengers haven’t and won’t touch the body.",
    "If you loot the body it will become a recurring figure in your dreams until you sell off the loot.",
    "The body’s been dusted with mutagenic spores.",
    "The body’s loyal pet viper guards it still from inside a pocket.",
    "A faulty Speak With Dead spell was cast on the body. If touched it’ll scream its life story until its vocal chords rupture.",
    "The body’s been smeared with poisonous slime.",
    "Any coins the body carries are stamped with its own face.",
    "Any coins the body carries have been amateurishly clipped.",
    "The body’s face is frozen in a paroxysm of fear, and its hair is still standing on end.",
    "The body is that of a missing person, and there is a reward on offer for news of their fate.",
    "The body falls apart along invisible seams when touched.",
    "It’s an unusual zombie which will imprint on and obey the first person to touch it.",
    "When touched its flesh will slough off its bones.",
    "On closer examination the body’s clothes are organic parts of it.",
    "They’re still alive and are taking a nap.",
    "The body is currently under clairvoyant observation by a self-righteous wizard.",
    "The body, the floor it’s lying on, and its belongings have all partially fused together, and must be cut apart if they are to be retrieved.",
    "The body’s blood has been replaced with imperishable honey. This is quite valuable if drained, and could also be used as an encumbrance-efficient ration.",
    "The body is slowly being carried away by ants.",
    "The body’s possessions are wildly anachronistic.",
    "The body is only dead while observed (seen, heard, smelled, etc.). When unobserved, they return to life.",
    "Its brain has been messily slurped out one ear.",
    "The wealth it’s carrying was stolen from someone dangerous who wants it all back.",
    "The body is a hollow skin that collapses when touched.",
    "The body has been colonized by an intelligent fungus that intends to use it as a vessel to communicate with and go about humanity.",
    "They bore a supernatural debt which will fall on the first person to touch their body.",
    "The body is not dead, but metamorphosing.",
    "The body has many minor wounds, and one will transfer to the person who touches them or takes one of their possessions each time they do so.",
    "It’s carrying something that used to belong to you.",
    "They’re someone you used to know but forgot until now.",
    "The body bursts into butterflies when touched. Their possessions remain intact.",
    "When touched the seed planted in the body’s chest will immediately sprout to full size.",
    "When touched the body will violently expel a pool of acid from all orifices.",
    "The body’s caught in a non-localized time loop. Every 1d6 hours it and its possessions will return to the condition it was found in, and its possessions will return to their positions on the body.",
    "They are still alive but suffering from Cotard delusion.",
  ];

  static String getOddCorpse() {
    var rng = new Random();
    return oddCorpses[rng.nextInt(oddCorpses.length)];
  }

  static const List<String> tattooLocations = [
    "arm",
    "leg",
    "chest",
    "back",
    "neck",
    "face",
    "hand",
    "shoulder",
  ];

  static const List<String> tattooDesigns = [
    "family",
    "religious",
    "wise phrase",
    "crown",
    "skull",
    "feather",
    "arrow",
    "tribal",
    "geometric",
    "music",
    "portrait",
    "star",
    "compass",
    "ship",
    "anchor",
    "money",
    "angel",
    "devil",
    "commemorative",
    "name",
    "moon",
    "tree",
    "wave",
    "crest",
    "clock",
    "mountain",
    "runes",
    "heart",
    "flower",
    "sun",
    "wolf",
    "bear",
    "fox",
    "octopus",
    "phoenix",
    "dragon",
    "snake",
    "fish",
    "bird",
    "lion",
    "cat",
    "dog",
    "butterfly",
    "dragonfly",
    "owl",
  ];

  static String getTattoo() {
    var rng = new Random();
    String tattooLocation = tattooLocations[rng.nextInt(tattooLocations.length)];
    String tattooDesign = tattooDesigns[rng.nextInt(tattooDesigns.length)];
    return tattooDesign + " design\non the " + tattooLocation;
  }

  static const List<String> hauntings = [
    "Bleeding Walls",
    "Rain of Stones",
    "Faces Through Walls",
    "Staring Paintings",
    "Possessed Mirror",
    "Staring China Dolls",
    "Slamming Doors",
    "Stairs to Chutes",
    "Voices from Basement",
    "Voices from Attic",
    "Inexplicable Chanting",
    "Inexplicable Singing",
    "Inexplicable Rhyming",
    "Flying Furniture",
    "Shadow people",
    "Sounds of Footsteps",
    "Flaring Candles",
    "Sudden Darkness",
    "Cold Spots",
    "Inexplicable Scratching",
    "Messages Written In: (blood / cobwebs / ectoplasm / scratches)",
    "Decaying Room",
    "Flashback Room",
    "Windows shattering",
    "Mirrors shattering",
    "Inexplicable children’s laughter",
    "Single Person Hallucinations",
    "Multiple Person Hallucinations",
    "Sound of scratching quill/pen",
    "Reversed Grandfather clocks",
    "Windows opening and shutting",
    "Horror Feast",
    "Meat Moss",
    "Wet, Meaty Slapping",
    "Rats in the Walls",
    "Blood Flood",
    "Ominous Music Box",
    "Flying Books",
    "Possessed Puppet",
    "Upside Down Room",
    "Ominous Bird calls: (raven / owl)",
    "Quicksand Floor",
    "Living Taxidermy",
    "Eyeless Portraits",
    "Gunther von Hagens Sculptures",
    "Grasping Arms from Walls",
    "Constricting Furniture",
    "Hungry Piano",
    "Location Flashbacks",
    "Infinite Hallway",
    "Sudden Thunderstorm",
    "Bathtub full of: (filthy water / blood / slime / insects / viscera)",
    "Book of the Dead",
    "Knocking",
    "Rapid Aging Photographs",
    "Repeated Room",
    "Dozens of Identical Doors",
    "Statues/Paintings Crying: (tears / blood / glass / snakes)",
    "Walls Closing In",
    "Bird Flying Through Window",
    "Bats from fireplace",
    "Flaring Fireplace",
    "Food suddenly rots/goes stale",
    "Water turns into: (blood / spiders / slime / ice)",
    "Rapidly spreading stains",
    "Swarm of: (rats / bats / spiders / crawling hands)",
    "Moving/Hostile Armor",
    "Ectoplasm Coating",
    "Sobbing/Weeping Sounds",
    "Caterwauling",
    "Ouija Board",
    "Severe Nightmares",
    "Odor of: (rust / blood / feces / rot)",
    "PC Levitation",
    "Inverted Holy Symbols",
    "All animals go silent",
    "Inexplicable itching",
    "Goose pimples/hair stand on end",
    "Tinkling of bells",
    "All the clocks ring at once",
    "Phonograph plays itself",
    "Reflected Room",
    "Involuntary Dancing",
    "Organ Room",
    "Melting Room",
    "Burning Room",
    "Charred Room",
    "Cracking Room",
    "Windows into the Other",
    "Shifting Statutes/Paintings",
    "Endless Countdown Clock",
    "Automatic Writing",
    "Writhing Under Skin",
    "Spider/Insect Vomit",
    "Breathing on Neck",
    "Stone Tape Phenomena",
    "Curtains/Rocking Chairs Shift",
    "Ectoplasmic Mist",
    "St. Elmo’s Fire",
    "Miniature House Replica",
  ];

  static String getHaunting() {
    var rng = new Random();
    return hauntings[rng.nextInt(hauntings.length)];
  }
}